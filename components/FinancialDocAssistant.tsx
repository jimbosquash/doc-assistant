// pages/index.tsx (Next.js App Router or SPA style)
"use client"
import { Button } from '@mui/material';
import React, { useState } from 'react';
// import { Button } from "@/components/ui/button"; // assuming you're using shadcn/ui or similar
import { ChevronDownIcon } from 'lucide-react';
import DocxViewer from './Docxviewer';
import PlaceholderSidebar from './PlaceholderSidebar';
import FocusedPlaceholderPanel from './FocusedPlaceholderPanel';

export default function EditorPage() {
  const [title, setTitle] = useState("Welcome to the Future of Writing");
  const [description, setDescription] = useState("This is a bold new paragraph generated by our AI-assisted workflow. You can edit this on the left, and the results appear here in real time.");
  const [placeholders, setPlaceholders] = useState<string[]>([]);
  const [focused, setFocused] = useState<string | undefined>();
  const [placeholderValues, setPlaceholderValues] = useState<Record<string, string>>({});



  return (
    <div className="w-full h-screen flex overflow-hidden">
      {/* Left Panel */}
      <div className="w-1/3 bg-gray-100 p-6 flex flex-col border-r border-gray-300">
        {/* Main content area: takes all vertical space above buttons */}
        <div className="flex flex-col grow min-h-0 space-y-6 overflow-hidden">
          {/* Top: Focused placeholder config (2/3 height) */}
          <div className="flex-2 basis-2/3 min-h-0 overflow-auto">
            <FocusedPlaceholderPanel
              focused={focused}
              metadata={placeholderMetadata}
            />
          </div>

          {/* Middle: Placeholder list (1/3 height) */}
          <div className="flex-1 basis-1/3 min-h-0 overflow-auto">
            {/* <PlaceholderSidebar
              placeholders={placeholders}
              onSelect={setFocused}
            /> */}
          </div>
        </div>

        {/* Bottom: Buttons, size to content */}
        <div className="flex justify-end space-x-2 pt-6">
          <Button variant="outlined">Cancel</Button>
          <Button variant="contained">Confirm & Export</Button>
        </div>
      </div>

      {/* Right Panel */}
      <div className="flex-1 bg-white p-10 overflow-y-auto">
        <DocxViewer
          fileUrl="/files/Financial_Workflow_Template_Dynamic.docx"
          onPlaceholdersExtracted={setPlaceholders}
        // focusedPlaceholder={focused}
        // onPlaceholderEdit={(updated) => setPlaceholderValues(updated)}
        />
      </div>
    </div>
  );
}

function Dropdown({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <div className="border border-gray-300 rounded p-3 bg-white shadow-sm">
      <div className="flex items-center justify-between mb-2 text-sm font-semibold text-gray-700">
        {title}
        <ChevronDownIcon size={16} />
      </div>
      {children}
    </div>
  );
}


export const placeholderMetadata: Record<string, {
  title: string;
  description: string;
  dropdowns: {
    label: string;
    options: string[];
  }[];
}> = {
  ClientName: {
    title: "Client Name",
    description: "This field identifies the name of the client in the document.",
    dropdowns: [
      { label: "Format", options: ["Full Name", "Short Name", "Abbreviation"] }
    ]
  },
  EngagementDate: {
    title: "Engagement Date",
    description: "Specifies when the engagement started or was last updated.",
    dropdowns: [
      { label: "Date Format", options: ["MM/DD/YYYY", "DD/MM/YYYY", "ISO 8601"] }
    ]
  },
  CustomNotes: {
    title: "Custom Notes",
    description: "Field for adding any miscellaneous or client-specific notes.",
    dropdowns: [
      { label: "Tone", options: ["Neutral", "Friendly", "Formal"] },
      { label: "Length", options: ["Short", "Detailed"] }
    ]
  },
};




// <div className="space-y-4">
// {/* Dropdown Panels */}
// <Dropdown title="Tone">
//   <select className="w-full border p-2 rounded">
//     <option>Professional</option>
//     <option>Friendly</option>
//     <option>Creative</option>
//   </select>
// </Dropdown>

// <Dropdown title="Audience">
//   <select className="w-full border p-2 rounded">
//     <option>General</option>
//     <option>Developers</option>
//     <option>Executives</option>
//   </select>
// </Dropdown>

// <Dropdown title="Title Text">
//   <input
//     className="w-full border p-2 rounded"
//     value={title}
//     onChange={(e) => setTitle(e.target.value)}
//   />
// </Dropdown>

// <Dropdown title="Paragraph Content">
//   <textarea
//     className="w-full border p-2 rounded h-28"
//     value={description}
//     onChange={(e) => setDescription(e.target.value)}
//   />
// </Dropdown>
// </div>


